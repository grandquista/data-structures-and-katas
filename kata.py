# 01?:*+^$()[]|
B = lambda n: bin(n)[2:]


SOLUTION = {
    i: {**{j: B(j).rjust(len(B(i)), '0') for j in range(i)}, 0: f'0+|{B(i)}'}
    for i in range(3, 18, 2)
}

SOLUTION_ODD = {
    1: '[01]+',
    3:
        '1001|10101|100001|101101|1000101|1010001|1011101|10000001|10001101'
        '|10100101|10110001|10111101',
    5:
        '11000011|10011011|10010001|10000111|'
        '1110011|1101001|1001011|1000001|110111|100011|11001|1111',
    7:
        '10111101|10100001|'
        '10010011|10000101|1101001|1011011|1001101|110001|100011|10101',
    9:
        '10111101|'
        '10101011|10000111|1110101|1100011|1010001|111111|101101|11011',
    11: '10100101|10001111|1111001|1100011|1001101|110111|100001',
    13: '11000011|10101001|10001111|1110101|1011011|1000001|100111',
    15: '11000011|10100101|10000111|1101001|1001011|101101',
    17: '10111011|10011001|1110111|1010101|110011'
}


def k(n):
    if n % 2 == 0:
        return f'{ k(n // 2) }0'
    return f'(0|{ B(n) }|{ SOLUTION_ODD[n] })+'


def kata(n):
    return f'^0*(0|({ k(n) }))$'
